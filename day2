10장
1. 배열의 다양한 기능
- Array 는 타입 객체.

1) 수정 메서드
	1) push(data) -> 배열의 끝에 data값을 추가
	2) shift ()  -> 배열의 첫 번째 요소를 잘라낸다.
2) 접근자 메서드
	1) concat(array)  -> 지정한 배열을 대상 배열에 연결
	2) toString()   -> 배열의 요소를 문자열로 변환한 뒤 쉼표로 연경해서 반환.
3) 반복메서드
	1) forEach()  -> 배열의 요소를 callback을 사용하여 차례대로 처리
	2) every()   -> 배열의 모든 요소가 callback조건에 부합하는지 판정.
	
	
ex)
//*shift
var arr = ["망고","바나나","파인애플","오렌지"];
arr.shift();
console.log(arr);  //(3) ["바나나", "파인애플", "오렌지"]

//* push
arr.push("자두");
console.log(arr);  //(4) ["바나나", "파인애플", "오렌지", "자두"]
console.log(arr.sort());  //["바나나", "오렌지", "자두", "파인애플"]

//*sort
var int = [5,2,4,3,1];
int.sort();
console.log(int.sort());  //(5) [1, 2, 3, 4, 5]

//* sort오류
int =[10,11,9,15,21];
console.log(int.sort());  //(5) [10, 11, 15, 21, 9]

//* sort오름차순
var k =int.sort(function(a,b){
console.log("a값"+ a);
console.log("b값"+ b);
console.log("a-b값" , a-b);
return a-b;
});
console.log(k);  //(5) [9, 10, 11, 15, 21]

//* sort내림차순
k=int.sort(function(a,b){
return b-a;
});
console.log(k); //(5) [21, 15, 11, 10, 9]

// *객체 
var param = [
{ name : "블랙앵거스", code : 21},
{ name : "세븐치즈", code : 25},
{ name : "포테이토", code : 13},
{ name : "문어슈림프", code : 44}
]

var p = param.sort(function(a,b){
console.log("a" + a.name);
console.log("b" + b.name);
return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;
/*
1. a.name < b.name 비교
true 면 -1 false면  a.name > b.name ? 1 : 0
2. 다음 조건 a.name > b.name 여기서 true면 1 false 0 
*/

});
console.log(p);
/*
0: {name: "문어슈림프", code: 44}
1: {name: "블랙앵거스", code: 21}
2: {name: "세븐치즈", code: 25}
3: {name: "포테이토", code: 13}
*/

/* code 오름차순 */
var n = param.sort(function(a, b) { // 오름차순
return a.code - b.code;
});
console.log(n);
/*
0: {name: "포테이토", code: 13}
1: {name: "블랙앵거스", code: 21}
2: {name: "세븐치즈", code: 25}
3: {name: "문어슈림프", code: 44}
*/
	
	
	
2. 다차원 배열

	1) 2차원 배열 생성
	var x = new Array(3);
	for(var i=0;i<3; i++){
		x[i]= new Array(3);
	}

	for(var count =1 , i =0; i<3; i++ ){
		for(var j =0; j<3; j++){
			x[i][j] = count++;
			//배열x i번째 방에 두번째 방 j번째에 count++값 대입
		}
	}
	console.log(x);

	0: (3) [1, 2, 3]
	1: (3) [4, 5, 6]
	2: (3) [7, 8, 9]

	/*
	1) 3칸짜리 x배열 생성
	2) x배열 첫번째 방 부터 순차적으로 3칸짜리 배열을  그안에 또 생성
	*/


3. ECMA Script6 배열과 새롭게 추가 된 기능

	1) 비구조화 할당
	- 배열,객체 등에서 값을 꺼내어 그 값을 별도의 변수에 대입하는 문장.
	
	* 기본적인 사용 문법
	var [a,b] = [3,4]
	console.log(a,b);  //3 4
	
	/* 이 형식과 동일하다. */
	var a = 3;
	var b =4 ;
	
	ex)
	1) 배열방식
	const animalList = ["CAT", "DOG", "TIGER"];
	const cat = animalList[0];
	const dog = animalList[1];
	const tiger = animalList[2];
	console.log(cat); // CAT
	console.log(dog); // DOG
	console.log(tiger); // TIGER
	/* 애니멀리스트라는 배열을 만들어 cat변수 안에 첫번째 값을 집어넣고 다시 꺼내오는 작업 방식. */
	
	=> ECMAScript6 version
	const [cat, dog, tiger] = ["CAT", "DOG", "TIGER"];
	console.log(cat); // CAT
	console.log(dog); // DOG
	console.log(tiger); // TIGER
	
	2)오브젝트 방식
	const animals = {
	  cat: "CAT",
	  dog: "DOG",
	  tiger: "TIGER"
	};
	const cat = animals.cat;
	const dog = animals.dog;
	const tiger = animals.tiger;
	console.log(cat); // CAT
	console.log(dog); // DOG
	console.log(tiger); // TIGER
	
	=> ECMAScript6 version
	const { cat, dog, tiger } = {
	  cat: "CAT",
	  dog: "DOG",
	  tiger: "TIGER"
	};
	console.log(cat); // CAT
	console.log(dog); // DOG
	console.log(tiger); // TIGER




4. Map 객체의 생성

var map = new Map([["tom", 123], ["hey","1588-3082"]]);  //초기값 생성
console.log(map);  //Map(2) {"tom" => 123, "hey" => "1588-3082"}
console.log(map.get("tom"));  //123  


	1) Map객체의 메서드
	clear() -> Map객체 안에 모든 데이터를 삭제
	get(key) -> Map객체에서 key가 가리키는 데이터를 반환
	set(key,value) -> Map객체에서 키가 key이고 value 인 데이터 추가
	
	


5. Set 
- Set 객체는 중복되지 않는 유일한 데이터를 수집하여 활용하기 위한 객체


생성
var set = new Set();
console.log(set);

초기데이터 지정해서 생성
var zip = new Set(["123","안녕?"]);
console.log(zip);  // Set(2) {"123", "안녕?"}

제너레이터 :  반복 가능한 이터레이터가 값으로 반환된다.
이터레이터 : for문 같은 반복 문

* 제너레이터로 이터레이터 생성해서 위 코드와 동일 작업
function* makeZip(){  
	yield "123";  // yield 는 return문과 동일..
	yield "안녕?";

}
var zips = makeZip();
zip = new Set(zips);
console.log(zip);  //Set(2) {"123", "안녕?"}

* 기능
	1) 중복제거
	const foo = new Set([ 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5 ]);
	console.log(foo);
	// Set { 1, 2, 3, 4, 5 }



------------------------------------------------------------------------------------------------------
11장 
버그와 오류에 대처하는 방법

1. Strict 모드 사용
- 자바스크립트는 변수를 선언하지 않고 사용이 가능하다. 
이렇게 선언한 변수는 전역변수로 취급하기에 에러가 발생하지 않음.
하지만 Strict모드로 사용하면 언어의 사양을 엄격하게 제안.

    ex)
    에러 발생
    function f(x){
      "use strict";
      y =x;  // Uncaught ReferenceError: y is not defined
      console.log(y);
    }

    수정 안
    function f(x){
      "use strict";
      var y;  //변수 선언 해준다.
      y =x;  
      console.log(y);
    }

    1) 첫머리에 입력하면 function 안에 function 중첩함수도 가능
    2) <script></script>안에 한번 넣었으면 해당 스크립트만 적용
    <script>
    "use strict"; 
    </script>

    <script> //이 스크립트는 적용 불가
    x=2;
    </script>

2. 스타일 가이드 활용
- 여러 사람이 함께 프로그램 개발할때 스타일 가이드를 참고하여 코딩 규칙을 정해 두고 작업을 진행하는게 좋다.
https://github.com/tipjs/javascript-style-guide

3. console.trace();
- 실행 중인 함수의 호출 스택을 볼 수 있다.
: 실행 문맥은 스택구조로 관리. 데이터를 아래에서부터 쌓아올려서 마지막으로 추가한 데이터를 먼저 꺼내는 후입선출 방식으로 관리
function foo() {  
  function bar() {  
    console.trace();  
  }  
  bar();  
}  
  
foo();  

-> 위 함수 스택 구조
4.html:13 console.trace
bar @ 4.html:13
foo @ 4.html:16
(anonymous) @ 4.html:20


설명
1) foo() 익명함수 가장먼저 호출 -> 스택 가장 바닥에 쌓임
2) foo 함수 실행 -> 스택 2번째
3) bar 함수 실행 -> 스택 3번째
4) bar 함수 안에서 실행문장 -> 스택 4번째


* 자바스크립트 호출 스택 이해하기
https://new93helloworld.tistory.com/358

4. 예외
: 자바스크립트는 에러가 발생하면 강제 종료가 되는데, 꼭 모두 실행해야하는 프로그램이 있다면...?
try, catch 문을 사용하면 종료되지 않고 프로그램이 끝까지 구동 될 수 있다.!!

try { 
/** * 정상이라면 이 코드는 아무런 문제없이 블록의 시작부터 끝까지 실행된다.
* 하지만 경우에 따라 예외가 발생할 수 있다.
* 예외는 throw 문에 의해 직접적으로 발생할 수도 있고,
* 또는 예외를 발생시키는 메서드의 호출에 의해 발생할 수도 있다. */ 

} catch (e) {
/** * 이 블록 내부의 문장들은 오직 try 블록에서 예외가 발생할 경우에만 실행된다.
* 이 문장들에선 지역 변수 e를 사용하여 Error 객체 또는 앞에서 던진 다른 값을 참조할 수 있다. 
* 이 블록에서는 어떻게든 그 예외를 처리할 수도 있고,
* 그냥 아무것도 하지 않고 예외를 무시할 수도 있고, 
* 아니면 throw 를 사용해서 예외를 다시 발생시킬 수도 있다. 
*/ 

}finally { 
/** * 이 블록에는 try 블록에서 일어난 일에 관계없이 무조건 실행될 코드가 위치한다.
* 이 코드는 try 블록이 어떻게든 종료되면 실행된다.
* try 블록이 종료되는 상황은 다음과 같다. 
* 1) 정상적으로 블록의 끝에 도달했을 때 
* 2) break, continue 또는 return 문에 의해서 
* 3) 예외가 발생했지만 catch 절에서 처리했을 때
* 4) 예외가 발생했고 그것이 잡히지 않은 채 퍼져나갈 때 */
}

    1) 예외의 전파
    try
    {
        f();
    }
    catch (e)
    {
        console.log("예외를 캐치함  ->" + e);
    }
    function f() { g(); }
    function g() { h(); }
    function h() { throw new Error("오류가 발생했습니다."); }
    
    실행결과
    예외를 캐치함  ->Error: 오류가 발생했습니다.
    
    순서 
     a. try문 f()실행
     b. 함수 f에서 g함수 실행
     c. g함수에서 h함수 실행
     d. h함수에서 에러 발생, throw한다 나를 불른 어미 한테.
     e. g가 에러를 받는다.
     f. f가 에러를 받는.
     g. try 문에서 에러가 발생하니 catch문으로 간다.
     h. 출력문 만남 문구 출력 "예외를 캐치함" 
     i. throw받은 파라미터 e 출력  "오류가 발생했습니다."
     


5. 에러
Error객체는 7가지 내장 객체가 있다.

1) ReferenceError  //잘못된 참조를 만났을 때  발생하는 예외 객체
    function f(x){
      "use strict";
      y =x;  // Uncaught ReferenceError: y is not defined
      console.log(y);
    }
    => y가 변수 선언 되어있지 않음.
    
2) SyntaxError  //자바스크립트 문법에 어긋나는 구문을 만났을 때 발생하는 예외 객체
    if( a > 0 ) {a ++ ;   //Uncaught SyntaxError: Unexpected end of input
    중괄호 안 닫힘.
    
3) RangeError  => 숫자 값이 허용 범위를 벗어났을 때 발생하는 예외 객체
    var check = function(num) {
	MIN =20;
	MAX =300;

  if (num < MIN || num > MAX) {
        throw new RangeError('Parameter must be between ' + MIN + ' and ' + MAX);
      }
    };

    try {
      check(210);
      check(10);  // catch 에러 발생 Parameter must be between 20 and 300
    }
    catch (e) {
      if (e instanceof RangeError) {
        // Handle range error
        console.log(e.message)
      }
    }
    finally{
        console.log("무조건 실행");
    }
    





