● 객체
-> 이름과 값을 한쌍으로 묶은 데이터를 여러 개 모은 것. (* 리터럴 : 프로그램에서 직접 작성할 수 있는 상수값)

var card = {suit : "하트", rank : "A"}  // 객체 리터럴로 표현
ex) 도미노 ajax넘겨줄 때
var param = {
		action_code : 'selectAD',
		order_gubun : order_gubun,
		gift_yn : $("#gift_yn").val(),
		branch_code : branch_code,
		branch_gb : branch_gb,
		addr_sn : sn
	};
	
● 함수
기본 문법 : function add(x){return x;}

	- 리턴문 다음에는 줄 바꿈 문자를 넣지 마세요.!
	return
	x * y ;

	return ; 
	x * y ; 

	값이 없는 리턴문으로 해석이 됩니다.!
	
호이스팅: 함수 선언문의 끌어올림
함수 선언 전에 호출이 먼저 되었어도 호이스팅으로 인해 에러메세지 대신 출력이 된다.
console.log(add(4,6));  //10
function add(x,y){
	return x+y;
}


● 템플릿 리터럴 (역따옴표)
-placeholder 
-> 외부에서 주어지는 값을 넣기 위한 방식

	<input type="text" value="123" /> // 6월 21일
	
	<script type="text/javascript">
		var k = document.getElementsByTagName('input')[0];
		var now = new Date();
		k.value=`${now.getMonth()+1}월 ${now.getDate()}일`;  //`` 안쓰면 에러
	</script>
	
	

● let 선언자 (ECMA 6)
: 블록 유효범위를 가짐
let x ="otder x ";
{
	let x = "inner x";
	let y = "inner y";
	console.log(x);  //inner x 
	console.log(y);  //inner y
}

console.log(x);  //otder x
console.log(y); //Uncaught ReferenceError: y is not defined  블럭 스코프를 가진다.


ex )  var , let 선언자의 차이
	var x = 10;
	var x = 20;  // 같은 변수명으로 선언하면 마지막 값으로 입력
	console.log(x);  //20

	let y = 10;
	//let y = 20;
	console.log(y);  //Uncaught SyntaxError: Identifier 'y' has already been declared


● const 선언자 (ECMA 6)
: 블록 유효범위를 가짐
: 한 번만 값을 지정할 수 있다.(상수) 
: 반드시 초기화 시점에 값을 지정해야한다.
: 객체나 배열은 값을 수정 할 수 있다.

<script type="text/javascript">
	const x ="otder x ";
	console.log(x);  //otder x 

	//x= "dddddd";  //이미 선언 된 상수값을 수정할 수 없다. 에러 발생

	const list = {"k1" : "첫번째 데이터 " , "k2" : "두번째 데이터"};

	console.log(list);  //{k1: "첫번째 데이터 ", k2: "두번째 데이터"}
	list.k1 = "세번째 데이터"
	console.log(list);  //{k1: "세번째 데이터", k2: "두번째 데이터"}

</script>


● 객체 생성 
	 생성자 사용
	 : 재 사용성이 높다.
	function aa (a,b){  //함수 생성
		this.aa = a;  //aa프로퍼티에 "하트"
		this.bb = b;  //bb프로퍼티에 "A" 할당
	}
	
	var card = new aa("하트","A");  //aa생성자에 하트,A넣고 호출

	console.log(card);  //aa {aa: "하트", bb: "A"}   -> aa객체
		
		

● Date 생성자
var now = new Date();
console.log(now); //Sat Jun 22 2019 14:00:30 GMT+0900 (한국 표준시)

var now2 = new Date(2019,10,10);
console.log(now2);  //Sun Nov 10 2019 00:00:00 GMT+0900 (한국 표준시)
// Date의 내장함수 사용
console.log(now2.getFullYear() +"/"+ now2.getMonth() +"/"+ now2.getDate()) //2019/10/10 


● 배열
자바스크립트의 배열은 문자,숫자 데이터 타입 상관없이 입력이 가능

	1) 배열

	var event = [1,2,3,4];
	console.log(event);  // (4) [1, 2, 3, 4]

	var arr = new Array(5,6,7,8);  //객체 생성해서 배열만들기
	console.log(arr);  //(4) [5, 6, 7, 8]

	arr[4] = 'aaaa'; //4번째에 값을 추가.
	console.log(arr);  //[5, 6, 7, 8, "aaaa"]

	arr.push('끝');  //push 는 가장 마지막에 밀어넣는다.
	console.log(arr);  //[5, 6, 7, 8, "aaaa", "끝"]
	console.log(arr.length);  //6

	delete arr[1]; //삭제해도 배열의 길이는 변하지 않는다.  empty 라고 들어온다.
	console.log(arr)  //[5, empty, 7, 8, "aaaa", "끝"]  //6
	console.log(arr.length)
	console.log(arr[1])  //undefined  -> empty 값을 불러오면 


	

● 연산자
	1) 우선순위
	var a= 10
	var b=5;

	var k = a / b * 2;
	console.log(k); //4 

	k = ++a * 3;
	console.log(k); //33

	console.log(a); //11

	//현재 a값 11
	// 연산자 우선순위
	1. <
	2. ==
	3. &&

	k= a < b && a == 11
	console.log(k); //false
	
	2) 산술연산자
	
		*산술 이항 연산자
		
		+ 더하기  a+b
		- 빼기    a-b
		* 곱하기  a*b
		/ 나누기  a/b
		% 나머지  a%b
		
		
		*산술 단항 연산자
		++ 증가 연산자 ++a  a에 1을 더한 다음에 a값을 평가
		              a++  a를 평가한 다음에 a에 1을 더한다.
			      
		-- 감소 연산자 --a  a에서 1을 뺀 다음에 a 값을 평가한다.
			      a--  a를 평가한 다음에 a에서 1을 뺀다.
			      
		+ 아무것도 처리하지 않음  +a  a와 같은 값으로 평가한다.
		-  부호 반전             -a  a의 부호를 반전한 값으로 평가한다.
		
		------------------------------------------------------------------
		var a =10;
		var b =5;

		console.log(a++);  //10
		console.log(a)//11
		------------------------------------------------------------------
		var a =10;
		var b =5;

		console.log(++a);  //11
		console.log(a)//11
		------------------------------------------------------------------
		var a =10;
		var b =++a;
		var c= a++ +2; //a에 2를 더한 후 마지막에 ++ 1을 더한다.
		
		console.log(b); //11
		console.log(c); //13
		------------------------------------------------------------------


		* 산술 대입 연산자
		+=  a+=b  a=a+b
		-=  a-=b  a=a-b
		*=  a*=b  a=a*b
		/=  a/=b  a=a/b
		%=  a%b   a=a%b
		
		var a =10;
		var b =20;

		a+=b // a=a+b
		console.log(a);
	
		ex)
		var k =5;
		var j =0;
		function add(){
			for(var i=0;i<k; i++){
				j+=i;
			}
		}

		add();
		console.log(j);

● 문자열 제어
1) 문자열 연결
+ 연산자는 피연산자가 모두 문자열이면 문자열로 연결
피연산자 중 하나가 문자열 또는 문자열로 변환할 수 있는 객체라면 다른 피연산자의 타입을 문자열로 바꾼 다음 연결.

ex) 
"hello" + "world"  //helloworld
"1" + "2"  //12
10+"title"  // 10title

2) 문자열 조작 메서드
- 래핑 (wrapping) -> 원시의 값을 객체로 변환하는 행위

var msg = new String ("hello world!")
console.log(msg);  //String {"hello world!"}

1) String 객체의 주요 메서드

	var msg = new String ("hello javascript!")
	var txt = "javascript! 공부하자"

	1. codePointAt(n)
	console.log(msg.codePointAt(1));  //e를 10진수로 -> 101

	2. charAt(n)
	console.log(msg.charAt(6));  //대상 문자열의 n번째  -> j

	3.endsWith(s[,n])
	console.log(txt.endsWith("공부하자"));  //true 마지막 문자열 판별

	if(txt.endsWith("공부하자")){
		console.log("끝단어를 찾아요 -> 공부하자");
	}
	
	4. includes(s[,n])
	console.log(txt.includes("script",4));  //true 4번째 순서부터 script라는 단어가 포함하는지


	5. match(r)  -> 값이 일치하는지 여부 체크
	if (! location.href.match('/day1')) {
	  alert('English page!');
	}
	else {
	  alert('Korean page!');
	}
	
	
	6. repeat(n)  -> n만큼 반복한다.
	- 음수이거나, Infinity  이면 에러가 난다.
	
	<div id="aaa"></div>  //javaScript 마스터javaScript 마스터
	function repeat1(){
		var str = "javaScript 마스터";
		var result =str.repeat(2);
		aaa.innerHTML = result;
	}

	repeat1();
	
	8. toString -> 객체를 스트링 형태로
	console.log(msg);  //String {"hello javascript!"}
	console.log(msg.toString());  //hello javascript!
	
	9. 문자열을 배열로 읽기
	var txt = "javascript! 공부하자"
	console.log("문자열을 배열형태로 읽기" + txt[5]); //c
	console.log(txt[5] = "kkkk");  //5번째문자를 kkkk로 변경해도 변경되지 않는다.
	console.log(txt);  //javascript! 공부하자



● 논리 연산자와 관계 연산자

1) 관계 연산자 
- 두 개의 피연산자를 비교한 결과를 논리값(true,false)로 반환.
- 주로 if/else , while , do/while, for문에서 사용

연산자
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
!=          값이 다름     a!=b      a값과 b값이 다르면 true, 그 외 false
===        값과타입이같음    a===b      a값과 b값과 타입이 같으면 true, 그 외 false
!==        값과타입이다름    a!==b      a값과 b값과 타입이 다르면 true, 그 외 false
<          작음            a < b      a값이 b값보다 작으면 true, 그 외 false
>          큼              a > b      a값과 b값보다 크면 true, 그 외 false
<=         작거나 같음     a<=b      a값이 b값보다 작거나 같으면 true, 그 외 false
>=         크거나 같음     a>=b      a값이 b값보다 크거나 같으면 true, 그 외 false


	
	1. 좌우 피연산자 타입이 같을 때 -> true ,false로 판정
	ex)
	var a = [1,2,3];
	var b = [1,2,3];

	console.log(a==b);  //false
	//객체는 저장할때 그 본연의 데이터가 아닌 주소값을 저장한다.


	2. 좌우 피연산자의 타입이 다를 때
	- 같은 타입이 되도록 타입을 변환 후 다음 규칙에 따라 판별
	
	* undefined와 null은 같은 것으로 친다.
	* 한쪽이 숫자 다른 한쪽이 문자열이면 문자열을 숫자로 변환해서 비교
	* 둘 중 한쪽이 논리값이면 truesms 1, false는 0 으로 변환해서 비교
	* 한쪽이 객체고 다른 한쪽이 숫자 또는 문자열이면 객체를 toString이나 valueOf 메서드를 사용해 원시타입으로 변환 후 비교
	* 앞의 규칙에서 벗어나면 모두 '같지 않음' 으로 한다.
	
	console.log(null == undefined)  //true  스크립트에선 null과 undefined값이 일치한다.
	console.log(new String ("aaaa")  == "aaaa")   //true
	console.log(new String ("aaaa")  === "aaaa")   //false  타입까지 비교하면 객체==문자열 이기에 false


2) 논리 연산자
- 논리 연산자는 관계연산자를 사용하여 만든 논리식과 결합하여 더욱 복잡한 논리를 정의

&&   논리곱   a && b    a와b가 모두 true면 true, 그 외에는 false
||   논리합   a || b    a와 b중 하나라도 true면 true, 모두가 false면 false
!    부정       !a      a가 true 면 false, false면 true


ex) 
var a = 10;
var b = 5;
var c = "";

console.log(  c.length);  //0

if(  a>0 || b>0  && c.length > 2){  //true
	console.log("통과111");
}

if( c.length > 2 && ( a>0 || b>0 )) {  //false
	console.log("통과222");  
}

* 피연산자의 평가
0,-0,빈 문자열(""), NaN, null undefined  -> false
0을 제외한 숫자, 빈문자열을 제외한 문자열, 모든 객체, 심벌 -> true


* 논리곱 연산자(&&)와 논리합 연산자(||)의 단락 평가
a && b 
a를 평가한 값이 false면 b의 값에 관계없이 표현식 자체가 false, b의 값을 평가하지 않는다.
이때! && 연산자는 false대신에 a의 값 자체를 반환.
또한 a의 값을 평가한 값이 true면 전체 표현식 값이 b의 값으로 결정
true , false 대신에 값자체를 반환

논리값이 필요한 장소에서는 논리값으로 타입이 변환되어 논리식 자체는 정상 동작!
	
	1) 논리곱 연산자(&&)
	ex)
	var p = null;
	console.log(p && p.name);  // null  true false가 아닌 첫번째 비교했던 false값이 나온다.

	p ={name:"홍달링",age:7};
	console.log(p && p.name);  //홍달링  true이면 우측값이 나온다.


	2) 논리합 연산자(||)
	var p = null;
	console.log(p || false);  //false   값이 모두 false이면 마지막 값을 반환

	p ={name:"홍달링",age:7};
	console.log(p || p.name);  //{name: "홍달링", age: 7} true면 그 값 자체를 반환

	ex) 초기값 설정 (시간을 맞춰야하는 함수? setTime을 걸어야 하는 이벤트일 경우? 사용..)
	function setting(x){  //파라미터가 없을경우 undefined로 들어간다. 
		x = x || 500;
		return x;
	}

	console.log(setting());  //빈값을 넣어주면 500으로 초기값 세팅
	console.log(setting(200 ));  //200 으로 세팅



3) 조건 연산자

	1. 삼항연산자
	var a =11;
	var result = (a%2==0) ? "짝수" : "홀수" ;  //true면  짝수, false면 홀수
	console.log(result);
	
	- 위 소스를 if/else로 쓰면
	if(a%2 ==0){
		console.log("짝수");
	}else{
		console.log("홀수");
	}



	2. 쉼표 연산자
	: var i =1 하고 sum =0 이라고 for문에 문장을 4개를 넣었다.
	for(var i =1,sum=0; i <=10 ; i++){
		sum += i;
		//sum = sum+i ; 

		console.log(sum);
		//1
		//3
		//6
		//10
		//15
		//21
		//28
		//36
		//45
		//55

	}

	: 위 버전의 기본 버젼 형식
	var sum=0;
	for(var i =1; i <= 10 ; i ++){
		sum += i;
		console.log(sum);
		//1
		//3
		//6
		//10
		//15
		//21
		//28
		//36
		//45
		//55
	}


● 명시적 타입 형변환

1) String 함수 사용
- String 객체를 생성하는 방법도 있지만 일반적인 함수로 사용이 가능하다.
String(26) -> "26"
String([1,2,3])  -> "1,2,3"
String(false)  -> "false"

2) Number함수 사용
- 
Number(123) ->123
Number(false)  ->0
Number(null) ->0
Number([1,2,3])  -> NaN


3) 수식안에서 묵시적 형변환

- 숫자를 뜻하는 문자열 -> 숫자 타입
	ex)
	var s = "2";
	s - 0  //2
	+s  //2
	
	ex) 숫자 넘버링 
	<div id="aaa">123</div>
	<button id="plus" onClick="add()">+</button>

	<script type="text/javascript">
	function add(){
		var a= document.getElementById("aaa");

		console.log(a.innerText);  //123
		console.log(typeof a.innerText);  //string

		var num = + a.innerText  // + 붙여줌으로 number 형변환
		a.innerHTML = num + 1 ; // 버튼을 누르면 124,125,126....
	}
	</script>


- 문자열을 해석(parse)해서 숫자로 바꾸는 함수
	ex) parseInt 문자열을 정수로
	parseInt("3.14")  //3
	parseInt("abc")   //Nan
	
	ex) parseFloat 문자열을 소수점으로
	parseFloat("3.14")  -> 3.14
	parseFloat("3.14meters")  -> 3.14  숫자 뒤 문자열 무시 
	
	


● console.time 콘솔 타이머

console.time("answer_time");  //타이머 이름은 동일하게 설정.
alert("확인 버튼");  //alert이 끝나는 시점까지 시간 체크
console.timeEnd("answer_time")  //타이머 끝나는 시간 console로 출력



● 이벤트 처리기 
- 이벤트 주도형 프로그램
-> 이벤트가 발생할 때까지 기다렸다가 이벤트가 발생했을 때 미리 등록해 둔 작업을 수행
ex) 버튼이 클릭 , 마우스에 html요소가 겹침, html요소 값이 변경

* 이벤트 처리기 등록 방법 3가지
	1) HTML 요소의 속성으로 등록하는 방법
	2) DOM요소의 프로퍼티로 등록하는 방법
	3) addEventListener 메서드 사용하는 방법
	
	
		1. html요소의 속성으로 등록  -> 페이지 http://darling2.cafe24.com//study/javascript/study/day1.html
		<div id="aaa">123</div>
		<button id="plus" onClick="add()">+</button>

		<script type="text/javascript">
		function add(){
				var a= document.getElementById("aaa");

				var num = + a.innerText  
				a.innerHTML = num + 1 ; 
		}
		</script>
		
		- 위 소스는 이벤트 처리기를 onClick을 사용.
		이 외에도 ondbclick , onmouseUp, onkeyUp,onresize ... 등 많이 있다.

		* 단점
		- html소스와 javascript소스가 뒤 섞일 수 있다.
		
		2. DOM에서 가져온 HTML 요소에 이벤트 처리기 지정하기
		
		<div id="bbb">123</div>
		<button id="plus2" >+</button>
		
		function add2(){
			var b= document.getElementById("bbb");
			var num = + b.innerText  
			b.innerHTML = num + 1 ; 
		}
		window.onload =function(){  //window.onload함수는 브라우저가 문서를 모두 읽은 후 실행
			var button = document.getElementById("plus2");
			button.onclick = add2;

		}
		
		또는
		window.onload =function(){
			var button = document.getElementById("plus2");
			button.onclick = function add2(){
				var b= document.getElementById("bbb");
				var num = + b.innerText  
				b.innerHTML = num + 1 ; 
			}
		}



		- DOM에서 이벤트를 처리하는 가장 큰 목적은 html과 script소스 분리하기 위함.
		-> 가독성과, 유지보수성이 높아짐.


		* 제거
		window.onload =function(){
			var button = document.getElementById("plus2");
			button.onclick = null;  // null값을 대입해줌으로써 제거한다.

		}


		3. addEventListener 메서드 사용
		var button2 = document.getElementById("plus3"); 
		button2.addEventListener('click',function(){
			var c= document.getElementById("ccc");
			var num = + c.innerText  
			c.innerHTML = num + 1 
		});
		

● 타이머  -> http://darling2.cafe24.com//study/javascript/study/day2.html
setInterval(function(){
	var circle = document.getElementById("circle");
	circle.style.top = "170px";
},1000);
setInterval(function(){
	var circle = document.getElementById("circle");
	circle.style.top = "150px";
},2000);


● HTML 요소의 프로퍼티 읽고 쓰기
- 체질량지수 계산하기  -> http://darling2.cafe24.com//study/javascript/study/day2.html
getElementById,innerHTML

window.onload = function (){
	document.getElementById("button").onclick = function(){
		var height = document.getElementById("height").value;
		var height_m_conversion = height / 100;     //m로 변환 1.6m
		var h = parseFloat(height_m_conversion);

		var w= parseFloat(document.getElementById("weight").value);
		var bmi = document.getElementById("bmi");
		bmi.innerHTML = (w/(h*h)).toFixed(1);  //소수점 첫째짜리까지만 노출
	}
}

● 캔버스 예제 사이트 -> https://www.screentoys.com/

		
