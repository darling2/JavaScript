<h1>asdfsadfsadf</h1>
● placeholder

	<input type="text" value="123" /> // 6월 21일
	
	<script type="text/javascript">
		var k = document.getElementsByTagName('input')[0];
		var now = new Date();
		k.value=`${now.getMonth()+1}월 ${now.getDate()}일`;
	</script>
	
	

● let 선언자
let x ="otder x ";
{
	let x = "inner x";
	let y = "inner y";
	console.log(x);  //inner x 
	console.log(y);  //inner y
	//console.log(d);  // 호이스팅 불가, 에러
	let d = "inner ddddddddd";
}

console.log(x);  //otder x


● const 선언자
	<script type="text/javascript">
		
		const x ="otder x ";
		console.log(x);

		//x= "dddddd";

		const list = {"k1" : "첫번째 데이터 " , "k2" : "두번째 데이터"};

		console.log(list);
		list.k1 = "세번째 데이터"
		console.log(list);

	</script>


● 객체 생성 
	 생성자 사용
	function aa (a,b){
			this.aa = a;
			this.bb = b;
		}
		var card = new aa("하트","A");

		console.log(card);  //aa {aa: "하트", bb: "A"}
		
		

● Date 생성자
var now = new Date();
console.log(now); //Sat Jun 22 2019 14:00:30 GMT+0900 (한국 표준시)

var now2 = new Date(2019,10,10);
console.log(now2);  //Sun Nov 10 2019 00:00:00 GMT+0900 (한국 표준시)
console.log(now2.getFullYear() +"/"+ now2.getMonth() +"/"+ now2.getDate()) //2019/10/10


● 배열
자바스크립트의 배열은 문자,숫자 데이터 타입 상관없이 입력이 가능

	1) 배열

	var event = [1,2,3,4];
	console.log(event);

	var arr = new Array(5,6,7,8);
	console.log(arr);

	arr[4] = 'aaaa'; //4번째에 값을 추가.
	console.log(arr);  //[5, 6, 7, 8, "aaaa"]

	arr.push('끝');
	console.log(arr);  //[5, 6, 7, 8, "aaaa", "끝"]
	console.log(arr.length);  //6

	delete arr[1]; //삭제해도 배열의 길이는 변하지 않는다.  empty 라고 들어온다.
	console.log(arr)  //[5, empty, 7, 8, "aaaa", "끝"]  //6
	console.log(arr.length)

	2) 희소배열
	희소 다항식, 희소 행렬에서 주로 사용

	배열에 속한 원소의 위치가 연속적이지 않은 배열
	length 속성의 값은 원소의 개수보다 항상 큼
	보통 배열보다 일반적으로 느리고, 메모리를 많이 사용하고, 원소를 찾는 시간이 오래 걸림
	
	 var arr2 = new Array(); // 빈 배열 객체를 생성함.
	arr2[99] = "JavaScript" // 배열 arr의 100번째 위치에 문자열을 삽입함.
	// 100번째 요소를 삽입했기 때문에 배열의 길이는 100으로 늘어남.
	console.log( arr2.length); //100
	
	

● 연산자
	1) 우선순위
	var a= 10
	var b=5;

	var k = a / b * 2;
	console.log(k); //4 

	k = ++a * 3;
	console.log(k); //33

	console.log(a); //11

	//현재 a값 11
	// 연산자 우선순위
	1. <
	2. ==
	3. &&

	k= a < b && a == 11
	console.log(k); //false
	
	2) 산술연산자
	
		*산술 이항 연산자
		
		+ 더하기  a+b
		- 빼기    a-b
		* 곱하기  a*b
		/ 나누기  a/b
		% 나머지  a%b
		
		
		*산술 단항 연산자
		++ 증가 연산자 ++a  a에 1을 더한 다음에 a값을 평가
		              a++  a를 평가한 다음에 a에 1을 더한다.
			      
		-- 감소 연산자 --a  a에서 1을 뺀 다음에 a 값을 평가한다.
			      a--  a를 평가한 다음에 a에서 1을 뺀다.
			      
		+ 아무것도 처리하지 않음  +a  a와 같은 값으로 평가한다.
		-  부호 반전             -a  a의 부호를 반전한 값으로 평가한다.
		
		------------------------------------------------------------------
		var a =10;
		var b =5;

		console.log(a++);  //10
		console.log(a)//11
		------------------------------------------------------------------
		var a =10;
		var b =5;

		console.log(++a);  //11
		console.log(a)//11
		------------------------------------------------------------------
		var a =10;
		var b =++a;
		var c= a++ +2; //a에 2를 더한 후 마지막에 ++ 1을 더한다.
		
		console.log(b); //11
		console.log(c); //13
		------------------------------------------------------------------


		* 산술 대입 연산자
		+=  a+=b  a=a+b
		-=  a-=b  a=a-b
		*=  a*=b  a=a*b
		/=  a/=b  a=a/b
		%=  a%b   a=a%b
		
		var a =10;
		var b =20;

		a+=b // a=a+b
		console.log(a);
	
		ex)
		var k =5;
		var j =0;
		function add(){
			for(var i=0;i<k; i++){
				j+=i;
			}
		}

		add();
		console.log(j);

● 문자열 제어
1) 문자열 연결
+ 연산자는 피연산자가 모두 문자열이면 문자열로 연결
피연산자 중 하나가 문자열 또는 문자열로 변환할 수 있는 객체라면 다른 피연산자의 타입을 문자열로 바꾼 다음 연결.

ex) 
"hello" + "world"  //helloworld
"1" + "2"  //12
10+"title"  // 10title

2) 문자열 조작 메서드
- 래핑 (wrapping) -> 원시의 값을 객체로 변환하는 행위

var msg = new String ("hello world!")
console.log(msg);  //String {"hello world!"}

1) String 객체의 주요 메서드

	var msg = new String ("hello javascript!")
	var txt = "javascript! 공부하자"

	1. codePointAt(n)
	console.log(msg.codePointAt(1));  //e를 10진수로 -> 101

	2. charAt(n)
	console.log(msg.charAt(6));  //대상 문자열의 n번째  -> j

	3.endsWith(s[,n])
	console.log(txt.endsWith("공부하자"));  //true 마지막 문자열 판별

	if(txt.endsWith("공부하자")){
		console.log("끝단어를 찾아요 -> 공부하자");
	}
	
	4. includes(s[,n])
	console.log(txt.includes("script",4));  //true 4번째 순서부터 script라는 단어가 포함하는지


	5. match(r)  -> 값이 일치하는지 여부 체크
	if (! location.href.match('/day1')) {
	  alert('English page!');
	}
	else {
	  alert('Korean page!');
	}
	
	
	6. repeat(n)  -> n만큼 반복한다.
	- 음수이거나, Infinity  이면 에러가 난다.
	
	<div id="aaa"></div>  //javaScript 마스터javaScript 마스터
	function repeat1(){
		var str = "javaScript 마스터";
		var result =str.repeat(2);
		aaa.innerHTML = result;
	}

	repeat1();
	
	8. toString -> 객체를 스트링 형태로
	console.log(msg);  //String {"hello javascript!"}
	console.log(msg.toString());  //hello javascript!
	
	9. 문자열을 배열로 읽기
	var txt = "javascript! 공부하자"
	console.log("문자열을 배열형태로 읽기" + txt[5]); //c
	console.log(txt[5] = "kkkk");  //5번째문자를 kkkk로 변경해도 변경되지 않는다.
	console.log(txt);  //javascript! 공부하자



● 논리 연산자와 관계 연산자

1) 관계 연산자 
- 두 개의 피연산자를 비교한 결과를 논리값(true,false)로 반환.
- 주로 if/else , while , do/while, for문에서 사용

연산자
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
!=          값이 다름     a!=b      a값과 b값이 다르면 true, 그 외 false
===        값과타입이같음    a===b      a값과 b값과 타입이 같으면 true, 그 외 false
!==        값과타입이다름    a!==b      a값과 b값과 타입이 다르면 true, 그 외 false
<         값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false
==          값이 같음     a==b      a값과 b값이 같으면 true, 그 외 false









