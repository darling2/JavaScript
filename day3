
* 이벤트 처리

1. addEventListener 메서드로 이벤트 리스너 등록


target.addEventListener(type,listener,useCapture);
구성요소
target : 이벤트 리스너를 등록할 DOM
type : 이벤트 유형을 뜻하는 문자열( "click","mouseup" ...)
listener : 이벤트가 발생했을 때 처리를 담당하는 콜백 함수의 참조
useCapture : 이벤트 단계

useCapture는 다음 값 중 하나가 될 수 있다.
true : 캡처링 단계
false : 버블링 단계 (생략했을 때의 기본값)

<script type="text/javascript">

	window.onload  = function(){
		var element = document.getElementById("box");
		element.addEventListener("click",function(e){  //1
			e.currentTarget.style.backgroundColor = "red";   //2
		}, false)  //3
	}

</script>

1 => 받는 인수는 이벤트 객체
2 => e.currentTarget 이벤트 객체안의 클릭한 요소를 참조하라는 객체.
3=> useCapture 단계


위 소스를 function 따로 빼서도 가능
<script type="text/javascript">

	window.onload  = function(){
		var element = document.getElementById("box");
		element.addEventListener("click",chcolor, false)
	}
	
	function chcolor(e){
		e.currentTarget.style.backgroundColor = "red";
	}
</script>


2. removeEventListener
window.onload  = function(){
	var element = document.getElementById("box");
	element.addEventListener("click",function(e){
		console.log("hello!!!!");
		element.removeEventListener("click" , arguments.callee, false );
	}, false)
}

//이벤트 리스너 안에서 removeEventListener를 호출해서 스스로 삭제함.
이때는 listener에 arguments.callee라는 값을 넘긴다.

예제) http://darling2.cafe24.com/study/javascript/study/day4.html
window.onload = function(){
	var box = document.getElementById("box");
	document.body.appendChild(box);

	var boxOffsetX, boxOffsetY;

	box.style.display = "inline-block";
	box.style.position="absolute";
	box.style.padding = "10px";
	box.style.backgroundColor = "blue";
	
	//mousedown 리스너
	box.addEventListener("mousedown" , function mouseDownListener(e){
		document.addEventListener("mousemove" ,mouseMoveListener, false);
		boxOffsetX = e.offsetX; boxOffsetY = e.offsetY;
	},false);
	
	//mouseUp 리스너
	box.addEventListener("mouseup" , function mouseUpListener(e){
		document.removeEventListener("mousemove" ,mouseMoveListener, false);
		boxOffsetX = e.offsetX; boxOffsetY = e.offsetY;
	},false);

	function mouseMoveListener(e){
		box.style.left = e.pageX - boxOffsetX + "px";
		box.style.top = e.pageY - boxOffsetY + "px";
	}

};


예제 ) 키보드 이벤트 객체 -> http://darling2.cafe24.com/study/javascript/study/4.html


3. 기본 동작 취소하기  preventDefault 메서드

window.onload = function(){
	var box = document.getElementById("box"); 
	box.addEventListener("click",function(e){
		if(confirm("페이지를 이동할래?"))  e.preventDefault();  //true일때 조건탐
	},false)
}
	
</script>

<a id ="box" href ="https://www.naver.com">box</a>


4. 이벤트 리스너 안의 this

	1) 이벤트 리스너 안의 this
	window.onload = function(){
		function Person(name){
			this.name = name;
		}

		Person.prototype.sayHello = function(){
			console.log("Hello" + this.name);
		}

		var person = new Person("TOM");
		var button = document.getElementById("box");
		button.addEventListener("click",person.sayHello , false);
	}

	</script>

	<a id ="box" name="홍">box</a>  
	1. 클릭시   //Hello 홍
	=> 이벤트 리스너안의 this는  이벤트가 발생한 요소 객체를 가리킴
	=> a태그의 name값을 출력한 것

	2)bind 메서드를 사용해 this를 특정 객체 가리키게 하기.
	window.onload = function(){
		function Person(name){
			this.name = name;
		}

		Person.prototype.sayHello = function(){
			console.log("Hello" + this.name);
		}

		var person = new Person("TOM");
		var button = document.getElementById("box");
		button.addEventListener("click",person.sayHello.bind(person) , false);
		//this를 person을 가리켜준다.

	}
	
5. 이벤트 리스너에 추가적인 정보를 넘기기
	1) 이벤트 리스너에 이벤트 객체 외에 추가적인 정보 전달(익명함수)
	window.onload = function(){
		var box = document.getElementById("box");
		box.addEventListener("click" , function (e){
			changeColor(e,"red");  //여기서 추가적인 정보를 넘겨준다.
		},false);

		function changeColor(e,color){
			e.currentTarget.style.backgroundColor=color;
		}
	}
	2) 이벤트 리스너에 이벤트 객체 외에 추가적인 정보 전달
	-위 익명함수에 비해 가독성이 높은 스크립트
	window.onload = function(){
		var box = document.getElementById("box");
		box.addEventListener("click" , changeColor("red"),false); //함수를 리스너에 등록해줌으로써 가독성을 더욱 높여준다.

		function changeColor(color){
			return function(e){
				e.currentTarget.style.backgroundColor = color;
			}
		}
	}
	
6. 커스텀 이벤트

	1) 이벤트 생성
	var event = document.createEvent(type);
	2) 초기화
	event.initEvent(type,bubbles,cancelable);
	type: 이벤트 유형 ("click","mouseup"....)
	bubbles : 버블링할지를 나타내는 논리값
	cancelable : 취소할 수 있는 이벤트로 만들지를 나타내는 논리값
	3) 이벤트 실행( 내보내기)
	target.dispatchEvent(event);
	
	-예시)
	window.onload = function(){
		var evt = document.createEvent("HTMLEvents"); //HTMLEvents 생성
		evt.initEvent("click",true,false);  //HTMLEvents 초기화 작업
		var box = document.getElementById("box");
		box.addEventListener("click" , function (evt){
			alert(`evt.cancelable: ${event.cancelable}` )  // cancelable 여부 초기화 시 false로 설정했기에  false가 뜸.
		});

		box.dispatchEvent(evt);  //dispatchEvent 메서드는 마우스 클릭이나 액션없이
		//바로 실행이 된다. 
	}
	
7. Promise
: 비동기 처리를 실행하고 , 그 처리가 끝난 후에 다음 처리를 실행하기 위한 용도
var promise = new Promise(function(resolve,reject){ ... });

	1) resolve : 함수안의 처리가 끝났을 때 호출해야 하는 콜백 함수
	2) reject : 함수안의 처리가 실패할 경우 호출하는 콜백함수
	
	_예)
	var promise = new Promise(function(resolve,reject){
		setTimeout(function(){
			console.log("AAA");
			resolve();
		},1000)
	});

	promise.then(function(){
		console.log("bbbb");
	});
	// AAA
	// bbbb
프로미스 객체 생성 후 실행함수 setTimeout 실행. 1초 뒤 콘솔 AAA찍고
바로 resolve(); 호출 
resolve함수가 실행되면 then메서드에 등록한 함수가 호출 된다.
콘솔 bbbb출력.

	
	
	_예) catch 문
	var promise = new Promise(function(resolve,reject){
		setTimeout(function(){
			var n = parseInt(prompt("10 미만의 숫자를 입력하세요"));
			if(n <= 10 ){
				resolve(n);  //성공시 then문
			}else{
				reject(n)  //실패시 catch문
			}
		},1000)
	});
	promise.then(function(num){
		console.log("num"+`${num}`);
	})
	.catch(function(n){
		console.log("eeeeeeeeerror" + `${n}` );
	});


	
	
: 프로미스 콜백
var promise = new Promise(function(resolve,reject){
	setTimeout(function(){
		var n = parseInt(prompt("10 미만의 숫자를 입력하세요"));
		if(n <= 10 ){
			resolve(n);  //성공시 then문
		}else{
			reject(n)  //실패시 catch문
		}
	},1000)
});
promise.then(function(num){
	console.log("num1111"+`${num}`);
	return num;  //값 전파 가능
})
.then(function(num){
	console.log("num2222"+`${num}`);
})
.then(function(num){
	console.log("num33333"+`${num}`);
})
.catch(function(n){
	console.log("eeeeeeeeerror" + `${n}` );
});
	
//num11114
//num22224
//num33333undefined
	
